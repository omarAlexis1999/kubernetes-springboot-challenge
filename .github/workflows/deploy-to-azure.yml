name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Azure Container Registry
      run: |
        echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_NAME }}.azurecr.io --username ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Build and push Docker images
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/vehicle-challenge:latest ./vehicle-challenge
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/vehicle-challenge:latest
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/conversion-challenge:latest ./conversion-challenge
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/conversion-challenge:latest
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/purchase-challenge:latest ./purchase-challenge
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/purchase-challenge:latest
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/report-challenge:latest ./report-challenge
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/report-challenge:latest

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Create Docker Registry Secret
      run: |
        kubectl create secret docker-registry acr-secret \
          --docker-server=${{ secrets.ACR_NAME }}.azurecr.io \
          --docker-username=${{ secrets.ACR_USERNAME }} \
          --docker-password=${{ secrets.ACR_PASSWORD }} \
          --docker-email=${{ secrets.DOCKER_EMAIL }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Create/Update ConfigMap and Secret
      run: |
        kubectl create configmap init-script-configmap --from-file=database/init-multi-postgres-databases.sh --dry-run=client -o yaml | kubectl apply -f -
        kubectl create configmap general-config --from-literal=DB_USER=${{ secrets.DB_USER }} --from-literal=DB_HOST=${{ secrets.DB_HOST }} --from-literal=DB_PORT=${{ secrets.DB_PORT }} --from-literal=TZ=${{ secrets.TZ }} --from-literal=LANG=${{ secrets.LANG }} --from-literal=LANGUAGE=${{ secrets.LANGUAGE }} --from-literal=POSTGRES_USER=${{ secrets.POSTGRES_USER }} --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} --from-literal=POSTGRES_MULTIPLE_DATABASES=${{ secrets.POSTGRES_MULTIPLE_DATABASES }} --from-literal=RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }} --from-literal=RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }} --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic general-secret --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} --dry-run=client -o yaml | kubectl apply -f -
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}

    - name: Deploy to AKS
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: |
        kubectl apply -f database/k8s/postgres-deployment.yaml
        kubectl apply -f database/k8s/postgres-service.yaml
        kubectl apply -f rabbitmq/k8s/rabbitmq-deployment.yaml
        kubectl apply -f rabbitmq/k8s/rabbitmq-service.yaml
        kubectl apply -f vehicle-challenge/k8s/vehicle-deployment.yaml
        kubectl apply -f vehicle-challenge/k8s/vehicle-service.yaml
        kubectl apply -f conversion-challenge/k8s/conversion-deployment.yaml
        kubectl apply -f conversion-challenge/k8s/conversion-service.yaml
        kubectl apply -f purchase-challenge/k8s/purchase-deployment.yaml
        kubectl apply -f purchase-challenge/k8s/purchase-service.yaml
        kubectl apply -f report-challenge/k8s/report-deployment.yaml
        kubectl apply -f report-challenge/k8s/report-service.yaml
